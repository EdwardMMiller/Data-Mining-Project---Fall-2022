""""

INSTRUCTIONS FOR CONTINUING ON WITH STREAMLIT

from here: https://medium.com/mlearning-ai/install-tensorflow-on-mac-m1-m2-with-gpu-support-c404c6cfb580

In Terminal

1. cd /Users/edwardmiller/opt/miniconda3  (started here - needed to be able to download tensorflow

# cd /Users/edwardmiller/Desktop/School\ documents/DATA\ MINING\ FOLDER/Data\ Mining\ Project\ Folder
# streamlit run News_Classifier_App.py

"""

############################################################################################
##################        LIBARY IMPORTS                              ######################
############################################################################################
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import zipfile
# basic libraries

import re
import newspaper
from newspaper import Article
# newspaper libraries

import streamlit as st
import altair as alt
# streamlit library

from absl import logging
import tensorflow as tf
import tensorflow_hub as hub
import keras as K
from tensorflow.keras.models import load_model
# tensorflow libraries

############################################################################################
##################        CLASSIICATION FUNCTIONS                     ######################
############################################################################################

#@st.experimental_memo(show_spinner=False)
# cache to make app run faster
def Load_Models():
    """
    Loads pretrained models for news classification

    """

    text_model = load_model("cnn_model_txt.h5",
                            custom_objects={'KerasLayer':hub.KerasLayer})
    title_model = load_model("cnn_model_ttle.h5",
                             custom_objects={'KerasLayer':hub.KerasLayer})
    # load models

    return text_model, title_model

Best_Model_Txt, Best_Model_Title = Load_Models()
# Load in the pretrained models


def get_model_predictions(model, test_x, probability = False):

  """ This function takes a pre-trained model in, inputs
      a test set and gets predictions from the model
  Args:    
      model - a pre-trained neural network model
      text_x: - a numpy array of string data
      probability: boolean that if set to True returns probabilities
                   instead of predictions (default = False)
  Returns: 
      predictions - an array of predictions
  """

  predictions = model.predict_on_batch(test_x).flatten()
  # getting a list of predictions into a 1d array
  predictions = tf.nn.sigmoid(predictions)
  # Apply a sigmoid since our model returns logits

  if probability != True:
    # determined whether to return probabilities or predictions
    predictions = tf.where(predictions < 0.5, 0, 1)
    # get the actual predicted values using 0.5 as a threshold

  return predictions.numpy()

def probability_weighter(text_probs, title_probs, text_weight, title_weight):

  """ This function returns a single array of weighted probabilities
      generated by weighing the probabilities of both the title and the text
      probabilities
  Args:
        text_probs: an array of probabilities from the text data
        title_probs: an array of probabilities from the title data
        text_weight: A float between 0 and 1 that is equal to 1 - title_weight
        title_weight: A float between 0 and 1 that is equal to 1 - text_weight
  Returns:
        weighted_probs: an array of probabilities generated from weighted
        combinations of text and title probabilities

  """
  shape = text_probs.shape
  weighted_probs = np.empty(shape, dtype=float)
  # initializing 1d numpy array to store weighted probabilities in

  for i in range(len(text_probs)):
    weighted_probs[i] = (text_probs[i]*text_weight 
                         + title_probs[i]*title_weight) 
                          # getting weighted probabilities
  return weighted_probs

def news_classifier(url):
  """ This is a function that takes in a news url, parses the text and title 
      from the article in the url, and then uses the two pre-trained neural 
      network models and their optimized weight parameters to determine the 
      probability that a news article is real 
  Args:
        url - a url string pointing to a news article
  Returns:
        wt_prob - a float between 0 and 1 referring to the probability
                  that the article is true or not
  """
  article = Article(url)
  article.download()
  article.parse()
  # downloading the article and parsing 
  # in order to get the title and text

  text = np.array([article.text])
  title = np.array([article.title])
  # saving the text and title as arrays in
  # order for the model to be able to read them

  text_prob = get_model_predictions(Best_Model_Txt, 
                                    text, 
                                    probability = True)
  title_prob = get_model_predictions(Best_Model_Title, 
                                     title, 
                                     probability = True)
  wt_prob =   probability_weighter(text_prob, title_prob, 0.500, 0.500)
  # getting text and title probabilities from the models 
  # and then getting the final weighted probability from 
  # the weighting function

  return wt_prob

def fake_or_real(url, threshold = 0.5):
    """ This is a function that takes in a news url, inputs it into
    the news_classifier function and based on the probability returned
    prints a statement saying whether the news article is real or fake 
    based on how the probability compares to the threshold argument

    Args:
        url - a url string pointing to a news article
        threshold - a float between 0 and 1 (default = 0.5)
    """
    url_article = Article(url)
    url_article.download()
    url_article.parse()
    url_title = url_article.title

    prob = news_classifier(url)
    # get the probabilitiy of article being true from the news_classifier
    if prob < threshold:
      st.write("Fake News Article - %s" %url_title)
      # anything below 0.5 declared fake unless 
      # threshold altered
    else:
      st.write("Real News Article - %s" %url_title)
    # prints Real if prob equal or above threshold



############################################################################################
##################            STREAMLIT FUNCTIONS                     ######################
############################################################################################

st.markdown("<h1 style='text-align: center; color: blue; font-size: 50px; '>NEWS CLASSIFIER APP</h1>",
            unsafe_allow_html=True)

url = st.text_input(
    'This is an app under development to check the credibility of a news article url - Please enter a news article url below')

  
def get_article_info(url):

    article = Article(url)
    article.download()
    article.parse()
    title = article.title
    text = article.text
    # downloading the article
    # and getting the title and text
    # from it
    return title, text

def make_probability_side_bar(title, text, prob_score):

    head = '<h2 style="text-align: center;"font-family:sans-serif; ">Model Probability of Being True</p>'
    st.sidebar.markdown(head, unsafe_allow_html=True)
    # sidebar title

    Prob_Df = pd.DataFrame({'Article': [title],
                            'Probability of Article Being True': [float(prob_score)],})
    # making dataframe in order to use altair bar chart

    st.sidebar.write(alt.Chart(Prob_Df,width = {"step": 275})
                     .mark_bar()
                     .configure_axis(title=None)
                     .encode(
            x = alt.X('Article', sort= None, axis=alt.Axis(labels=False)), 
            y = alt.Y('Probability of Article Being True',
                      scale=alt.Scale(domain=[0.0,1.0]),
                      sort= None),
            color = alt.condition(
                alt.datum['Probability of Article Being True'] < 0.5,
                alt.value('red'),
                alt.value('green'))
                # color is red if below 0.5
                # and green if equal or above 0.5
            ))
    # sidebar showing probability on scale of 0 to 1
    st.sidebar.write("Probability Score - ", float(prob_score))

def side_bar_header(title, text, prob_score):
    if title == '' or text == '':
        new_title = '<p style="font-family:sans-serif; text-align: center; color:Blue; font-size: 42px;">NO DATA</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        # accounts for when the function cannot read the article

    elif prob_score >= 0.5:

        new_title = '<p style="font-family:sans-serif; text-align: center; color:Green; font-size: 42px;">PROBABLY TRUE</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        make_probability_side_bar(title, text, prob_score)
        # true articles

    else:
        new_title = '<p style="font-family:sans-serif; text-align: center; color:Red; font-size: 42px;">PROBABLY FALSE</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        make_probability_side_bar(title, text, prob_score)
        # false articles
    
    # True/False headings for article

def run_app(url):

    if url != '':
        # app only starts running if url is not blank
        # prevents errors at start 
        title, text = get_article_info(url)
        # getting title and text only
        prob_score = news_classifier(url)
        # getting probability score for news article

        if prob_score < 0.5:
                    # make title and text labels red if article labeled False
                    st.markdown("<h2 style='text-align: center; color: red; font-size: 50px; '>Title</h1>",
                                unsafe_allow_html=True)
                    st.header(title)
                    st.write("---------------------------------")
                    st.markdown("<h2 style='text-align: center; color: red; font-size: 50px; '>Text</h1>",
                                unsafe_allow_html=True)
        else:
                    # make title and text labels green if article labeled True
                    st.markdown("<h2 style='text-align: center; color: green; font-size: 50px; '>Title</h1>",
                                unsafe_allow_html=True)
                    st.header(title)
                    st.write("---------------------------------")
                    st.markdown("<h2 style='text-align: center; color: green; font-size: 50px; '>Text</h1>",
                                unsafe_allow_html=True)  
        st.subheader(text)
        # show article title and text
        side_bar_header(title, text, prob_score)
        # shows the header and whether article Fake or Real
        # will generate a probability sidebar unless no data
        # obtained by url
        
run_app(url) 
# run the app



