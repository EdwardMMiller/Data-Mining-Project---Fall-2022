""""

INSTRUCTIONS FOR CONTINUING ON WITH STREAMLIT

In Terminal

# cd /Users/edwardmiller/Desktop/School\ documents/DATA\ MINING\ FOLDER/Data\ Mining\ Project\ Folder
# streamlit run News_Classifier_App.py

"""

############################################################################################
##################        LIBARY IMPORTS                              ######################
############################################################################################
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import zipfile
# basic libraries

import re
import newspaper
from newspaper import Article
# newspaper libraries

import streamlit as st
import altair as alt
# streamlit library

from absl import logging
import tensorflow as tf
import tensorflow_hub as hub
import keras as K
from tensorflow.keras.models import load_model
# tensorflow libraries

############################################################################################
##################        CLASSIICATION FUNCTIONS                     ######################
############################################################################################

#@st.experimental_memo(show_spinner=False)
# cache to make app run faster
def Load_Models():
    """
    Loads pretrained models for news classification

    """

    text_model = load_model("cnn_model_txt.h5",
                            custom_objects={'KerasLayer':hub.KerasLayer})
    title_model = load_model("cnn_model_ttle.h5",
                             custom_objects={'KerasLayer':hub.KerasLayer})
    # load models

    return text_model, title_model

Best_Model_Txt, Best_Model_Title = Load_Models()
# Load in the pretrained models

def get_model_predictions(model, test_x, probability = False):

  """ This function takes a pre-trained model in, inputs
      a test set and gets predictions from the model
  Args:    
      model - a pre-trained neural network model
      text_x: - a numpy array of string data
      probability: boolean that if set to True returns probabilities
                   instead of predictions (default = False)
  Returns: 
      predictions - an array of predictions
  """

  predictions = model.predict_on_batch(test_x).flatten()
  # getting a list of predictions into a 1d array
  predictions = tf.nn.sigmoid(predictions)
  # Apply a sigmoid since our model returns logits

  if probability != True:
    # determined whether to return probabilities or predictions
    predictions = tf.where(predictions < 0.5, 0, 1)
    # get the actual predicted values using 0.5 as a threshold

  return predictions.numpy()

def probability_weighter(text_probs, title_probs, text_weight, title_weight):

  """ This function returns a single array of weighted probabilities
      generated by weighing the probabilities of both the title and the text
      probabilities
  Args:
        text_probs: an array of probabilities from the text data
        title_probs: an array of probabilities from the title data
        text_weight: A float between 0 and 1 that is equal to 1 - title_weight
        title_weight: A float between 0 and 1 that is equal to 1 - text_weight
  Returns:
        weighted_probs: an array of probabilities generated from weighted
        combinations of text and title probabilities

  """
  shape = text_probs.shape
  weighted_probs = np.empty(shape, dtype=float)
  # initializing 1d numpy array to store weighted probabilities in

  for i in range(len(text_probs)):
    weighted_probs[i] = (text_probs[i]*text_weight 
                         + title_probs[i]*title_weight) 
                          # getting weighted probabilities
  return weighted_probs

def news_classifier(url):
  """ This is a function that takes in a news url, parses the text and title 
      from the article in the url, and then uses the two pre-trained neural 
      network models and their optimized weight parameters to determine the 
      probability that a news article is real 
  Args:
        url - a url string pointing to a news article
  Returns:
        wt_prob - a float between 0 and 1 referring to the probability
                  that the article is true or not
  """
  article = Article(url)
  article.download()
  article.parse()
  # downloading the article and parsing 
  # in order to get the title and text

  text = np.array([article.text])
  title = np.array([article.title])
  # saving the text and title as arrays in
  # order for the model to be able to read them

  text_prob = get_model_predictions(Best_Model_Txt, 
                                    text, 
                                    probability = True)
  title_prob = get_model_predictions(Best_Model_Title, 
                                     title, 
                                     probability = True)
  wt_prob =   probability_weighter(text_prob, title_prob, 0.500, 0.500)
  # getting text and title probabilities from the models 
  # and then getting the final weighted probability from 
  # the weighting function

  return wt_prob

############################################################################################
##################            STREAMLIT FUNCTIONS                     ######################
############################################################################################

st.markdown("<h1 style='text-align: center; color: blue; font-size: 50px; '>NEWS CLASSIFIER APP</h1>",
            unsafe_allow_html=True)
# shows title bar of the app on the screen

url = st.text_input(
    'This is an app under development to check the credibility of a news article url - Please enter a news article url below')
# gets url inpur from the user
  
def get_article_info(url):
    """  This function uses the newspaper libarary functionality
         to download the content of a website url and return the
         title and text of that website
    Args:
        url - a string containing a url pointing to a news article
    Returns:
        title - a string containing the title of the article
                the url is pointing to
        text - a string containing the title of the article
                the url is pointing to               
  """

    article = Article(url) 
    article.download()
    # download the article with libary newspaper Article functionality
    article.parse() # look through article to get necessary sections
    title = article.title 
    text = article.text 
    # downloading the article
    # and getting the title and text
    # from it
    return title, text

def make_probability_side_bar(title, text, prob_score):
    """  This function uses the title and text returned by
             the get_article_info() function along with the probability score
             returned by the news_classifier() function to create a sidebar on
             the left of the screen in the streamlit app showing the article's
             probability of being real or not according to the model
             along with a bar chart showing it on the scale 0 to 1
    Args:
        title - a string containing the title of an article from the url
        text - a string containing the text of an article from the url
        prob_score = a float show probability score given by model
    """
        
    head = '<h2 style="text-align: center;"font-family:sans-serif; ">Model Probability of Being True</p>'
    st.sidebar.markdown(head, unsafe_allow_html=True)
    # sidebar title

    Prob_Df = pd.DataFrame({'Article': [title],
                            'Probability of Article Being True': [float(prob_score)],})
    # making dataframe in order to use altair bar chart

    st.sidebar.write(alt.Chart(Prob_Df,width = {"step": 275})
                     .mark_bar()
                     .configure_axis(title=None)
                     .encode(
            x = alt.X('Article', sort= None, axis=alt.Axis(labels=False)), 
            y = alt.Y('Probability of Article Being True',
                      scale=alt.Scale(domain=[0.0,1.0]),
                      # ensures y bar only goes between 0 and 1
                      sort= None),
            color = alt.condition(
                alt.datum['Probability of Article Being True'] < 0.5,
                alt.value('red'),
                alt.value('green'))
                # color is red if below 0.5
                # and green if equal or above 0.5
            ))
    # sidebar showing probability on scale of 0 to 1
    st.sidebar.write("Probability Score - ", float(prob_score))

def side_bar_header(title, text, prob_score):
    """  This function uses the title and text returned by
        the get_article_info() function along with the probability score
        returned by the news_classifier() function to create a sidebar header on the left
        of the screen in the streamlit app which prints 'PROBABLY TRUE' if prob_score 0.5
        or greater, 'PROBABLY FALSE' if less then 0.5 and 'NO DATA'
        if the title or text are blank
    Args:
        title - a string containing the title of an article from the url
        text - a string containing the text of an article from the url
        prob_score = a float show probability score given by model
    """
    if title == '' or text == '':
        new_title = '<p style="font-family:sans-serif; text-align: center; color:Blue; font-size: 42px;">NO DATA</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        # accounts for when the function cannot read the article
        # does not make a sidebar here

    elif prob_score >= 0.5:
        new_title = '<p style="font-family:sans-serif; text-align: center; color:Green; font-size: 42px;">PROBABLY TRUE</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        make_probability_side_bar(title, text, prob_score)
        # true articles - makes a sidebar showing probability 

    else:
        new_title = '<p style="font-family:sans-serif; text-align: center; color:Red; font-size: 42px;">PROBABLY FALSE</p>'
        st.sidebar.markdown(new_title, unsafe_allow_html=True)
        make_probability_side_bar(title, text, prob_score)
        # false articles - makes a sidebar showing probability 
    
    # True/False headings for article

def run_app(url):
    """ This is the main function for the streamlit app. If the url section is not blank
        it runs the app and prints  the title and text of the articl to the screen
        and also outputs the pre-trained model's prediction as to whether the article is
        is real or not along with a probability sidebar showing how probable it is that it
        is a real article

    Args:
        url - a string input given by the user that points to a news article

    """
    if url != '':
        # app only starts running if url is not blank
        # prevents errors at start 
        title, text = get_article_info(url)
        # getting title and text only
        prob_score = news_classifier(url)
        # getting probability score for news article

        if prob_score < 0.5:
                    # make title and text labels red if article labeled False
                    st.markdown("<h2 style='text-align: center; color: red; font-size: 50px; '>Title</h1>",
                                unsafe_allow_html=True)
                    st.header(title)
                    st.write("---------------------------------")
                    st.markdown("<h2 style='text-align: center; color: red; font-size: 50px; '>Text</h1>",
                                unsafe_allow_html=True)
        else:
                    # make title and text labels green if article labeled True
                    st.markdown("<h2 style='text-align: center; color: green; font-size: 50px; '>Title</h1>",
                                unsafe_allow_html=True)
                    st.header(title)
                    st.write("---------------------------------")
                    st.markdown("<h2 style='text-align: center; color: green; font-size: 50px; '>Text</h1>",
                                unsafe_allow_html=True)  
        st.subheader(text)
        # show article title and text
        side_bar_header(title, text, prob_score)
        # shows the header and whether article Fake or Real
        # will generate a probability sidebar unless no data
        # obtained by url
        
run_app(url) 
# run the app



